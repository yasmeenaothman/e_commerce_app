// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'modles/cart_model.dart';
import 'modles/favourite_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6564302380425033455),
      name: 'CartModel',
      lastPropertyId: const IdUid(5, 7264845659921265277),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6327235763523678555),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2214595191717498938),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8333331471930507605),
            name: 'quantity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 947182697132916284),
            name: 'price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7264845659921265277),
            name: 'img',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 4171695943378690819),
      name: 'FavouriteModel',
      lastPropertyId: const IdUid(4, 262977600762847681),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4542011983042917046),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3097327979297599473),
            name: 'price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1422733472602243341),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 262977600762847681),
            name: 'img',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 4171695943378690819),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    CartModel: EntityDefinition<CartModel>(
        model: _entities[0],
        toOneRelations: (CartModel object) => [],
        toManyRelations: (CartModel object) => {},
        getId: (CartModel object) => object.id,
        setId: (CartModel object, int id) {
          object.id = id;
        },
        objectToFB: (CartModel object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final imgOffset = fbb.writeString(object.img);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addInt64(2, object.quantity);
          fbb.addInt64(3, object.price);
          fbb.addOffset(4, imgOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CartModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              quantity:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              price:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              img: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''));

          return object;
        }),
    FavouriteModel: EntityDefinition<FavouriteModel>(
        model: _entities[1],
        toOneRelations: (FavouriteModel object) => [],
        toManyRelations: (FavouriteModel object) => {},
        getId: (FavouriteModel object) => object.id,
        setId: (FavouriteModel object, int id) {
          object.id = id;
        },
        objectToFB: (FavouriteModel object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final imgOffset = fbb.writeString(object.img);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.price);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, imgOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FavouriteModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              price: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              img: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [CartModel] entity fields to define ObjectBox queries.
class CartModel_ {
  /// see [CartModel.id]
  static final id = QueryIntegerProperty<CartModel>(_entities[0].properties[0]);

  /// see [CartModel.title]
  static final title =
      QueryStringProperty<CartModel>(_entities[0].properties[1]);

  /// see [CartModel.quantity]
  static final quantity =
      QueryIntegerProperty<CartModel>(_entities[0].properties[2]);

  /// see [CartModel.price]
  static final price =
      QueryIntegerProperty<CartModel>(_entities[0].properties[3]);

  /// see [CartModel.img]
  static final img = QueryStringProperty<CartModel>(_entities[0].properties[4]);
}

/// [FavouriteModel] entity fields to define ObjectBox queries.
class FavouriteModel_ {
  /// see [FavouriteModel.id]
  static final id =
      QueryIntegerProperty<FavouriteModel>(_entities[1].properties[0]);

  /// see [FavouriteModel.price]
  static final price =
      QueryIntegerProperty<FavouriteModel>(_entities[1].properties[1]);

  /// see [FavouriteModel.title]
  static final title =
      QueryStringProperty<FavouriteModel>(_entities[1].properties[2]);

  /// see [FavouriteModel.img]
  static final img =
      QueryStringProperty<FavouriteModel>(_entities[1].properties[3]);
}
